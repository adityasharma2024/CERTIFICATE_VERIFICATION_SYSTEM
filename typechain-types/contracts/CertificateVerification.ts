/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CertificateVerificationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "ISSUER_ROLE"
      | "certificates"
      | "getInstitution"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "institutions"
      | "issueCertificate"
      | "registerInstitution"
      | "renounceRole"
      | "revokeCertificate"
      | "revokeRole"
      | "supportsInterface"
      | "verifyCertificate"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CertificateIssued"
      | "CertificateRevoked"
      | "InstitutionRegistered"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ISSUER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "certificates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstitution",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "institutions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueCertificate",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerInstitution",
    values: [AddressLike, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCertificate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCertificate",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ISSUER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "certificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstitution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "institutions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerInstitution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCertificate",
    data: BytesLike
  ): Result;
}

export namespace CertificateIssuedEvent {
  export type InputTuple = [
    certificateId: string,
    recipientName: string,
    course: string,
    issuedDate: string,
    issuedBy: AddressLike
  ];
  export type OutputTuple = [
    certificateId: string,
    recipientName: string,
    course: string,
    issuedDate: string,
    issuedBy: string
  ];
  export interface OutputObject {
    certificateId: string;
    recipientName: string;
    course: string;
    issuedDate: string;
    issuedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificateRevokedEvent {
  export type InputTuple = [certificateId: string, revokedBy: AddressLike];
  export type OutputTuple = [certificateId: string, revokedBy: string];
  export interface OutputObject {
    certificateId: string;
    revokedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InstitutionRegisteredEvent {
  export type InputTuple = [
    institutionAddress: AddressLike,
    name: string,
    email: string,
    accreditationId: string,
    country: string,
    registeredAt: BigNumberish
  ];
  export type OutputTuple = [
    institutionAddress: string,
    name: string,
    email: string,
    accreditationId: string,
    country: string,
    registeredAt: bigint
  ];
  export interface OutputObject {
    institutionAddress: string;
    name: string;
    email: string;
    accreditationId: string;
    country: string;
    registeredAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CertificateVerification extends BaseContract {
  connect(runner?: ContractRunner | null): CertificateVerification;
  waitForDeployment(): Promise<this>;

  interface: CertificateVerificationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ISSUER_ROLE: TypedContractMethod<[], [string], "view">;

  certificates: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, string, boolean] & {
        certificateId: string;
        recipientName: string;
        course: string;
        issuedDate: string;
        issuedBy: string;
        isValid: boolean;
      }
    ],
    "view"
  >;

  getInstitution: TypedContractMethod<
    [institutionAddress: AddressLike],
    [
      [string, string, string, string, bigint] & {
        name: string;
        email: string;
        accreditationId: string;
        country: string;
        registeredAt: bigint;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  institutions: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, string, string, bigint] & {
        institutionAddress: string;
        name: string;
        email: string;
        accreditationId: string;
        country: string;
        registeredAt: bigint;
      }
    ],
    "view"
  >;

  issueCertificate: TypedContractMethod<
    [
      certificateId: string,
      recipientName: string,
      course: string,
      issuedDate: string
    ],
    [void],
    "nonpayable"
  >;

  registerInstitution: TypedContractMethod<
    [
      institutionAddress: AddressLike,
      name: string,
      email: string,
      accreditationId: string,
      country: string
    ],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeCertificate: TypedContractMethod<
    [certificateId: string],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  verifyCertificate: TypedContractMethod<
    [certificateId: string],
    [
      [string, string, string, string, boolean] & {
        recipientName: string;
        course: string;
        issuedDate: string;
        issuedBy: string;
        isValid: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ISSUER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "certificates"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, string, boolean] & {
        certificateId: string;
        recipientName: string;
        course: string;
        issuedDate: string;
        issuedBy: string;
        isValid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInstitution"
  ): TypedContractMethod<
    [institutionAddress: AddressLike],
    [
      [string, string, string, string, bigint] & {
        name: string;
        email: string;
        accreditationId: string;
        country: string;
        registeredAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "institutions"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, string, string, bigint] & {
        institutionAddress: string;
        name: string;
        email: string;
        accreditationId: string;
        country: string;
        registeredAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "issueCertificate"
  ): TypedContractMethod<
    [
      certificateId: string,
      recipientName: string,
      course: string,
      issuedDate: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerInstitution"
  ): TypedContractMethod<
    [
      institutionAddress: AddressLike,
      name: string,
      email: string,
      accreditationId: string,
      country: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeCertificate"
  ): TypedContractMethod<[certificateId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyCertificate"
  ): TypedContractMethod<
    [certificateId: string],
    [
      [string, string, string, string, boolean] & {
        recipientName: string;
        course: string;
        issuedDate: string;
        issuedBy: string;
        isValid: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "CertificateIssued"
  ): TypedContractEvent<
    CertificateIssuedEvent.InputTuple,
    CertificateIssuedEvent.OutputTuple,
    CertificateIssuedEvent.OutputObject
  >;
  getEvent(
    key: "CertificateRevoked"
  ): TypedContractEvent<
    CertificateRevokedEvent.InputTuple,
    CertificateRevokedEvent.OutputTuple,
    CertificateRevokedEvent.OutputObject
  >;
  getEvent(
    key: "InstitutionRegistered"
  ): TypedContractEvent<
    InstitutionRegisteredEvent.InputTuple,
    InstitutionRegisteredEvent.OutputTuple,
    InstitutionRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "CertificateIssued(string,string,string,string,address)": TypedContractEvent<
      CertificateIssuedEvent.InputTuple,
      CertificateIssuedEvent.OutputTuple,
      CertificateIssuedEvent.OutputObject
    >;
    CertificateIssued: TypedContractEvent<
      CertificateIssuedEvent.InputTuple,
      CertificateIssuedEvent.OutputTuple,
      CertificateIssuedEvent.OutputObject
    >;

    "CertificateRevoked(string,address)": TypedContractEvent<
      CertificateRevokedEvent.InputTuple,
      CertificateRevokedEvent.OutputTuple,
      CertificateRevokedEvent.OutputObject
    >;
    CertificateRevoked: TypedContractEvent<
      CertificateRevokedEvent.InputTuple,
      CertificateRevokedEvent.OutputTuple,
      CertificateRevokedEvent.OutputObject
    >;

    "InstitutionRegistered(address,string,string,string,string,uint256)": TypedContractEvent<
      InstitutionRegisteredEvent.InputTuple,
      InstitutionRegisteredEvent.OutputTuple,
      InstitutionRegisteredEvent.OutputObject
    >;
    InstitutionRegistered: TypedContractEvent<
      InstitutionRegisteredEvent.InputTuple,
      InstitutionRegisteredEvent.OutputTuple,
      InstitutionRegisteredEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
